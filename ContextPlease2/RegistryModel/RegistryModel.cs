using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace ContextPlease2.RegistryModel
{
    /// <summary>
    /// Class that contains the model data for the generation of registry keys and declarations.
    /// </summary>
    public class RegistryModel
    {
        private const string RegistryRoot = "HKEY_CLASSES_ROOT\\";
        private static IEnumerable<string> RegistryHeader => new List<string>
        {
            "Windows Registry Editor Version 5.00",
            $"; This file has been automatically generated by {ContextPlease.Name} v{ContextPlease.Version}",
            $"; {ContextPlease.Name} can be found at {ContextPlease.Link}"
        };

        private IEnumerable<string> InstallerData
        {
            get
            {
                return Model!.SelectMany(key => key.InstallerLines(RegistryRoot));
            }
        }

        private IEnumerable<string> UninstallerData
        {
            get
            {
                return Model!.SelectMany(key => key.UninstallerLines(RegistryRoot));
            }
        }
        
        private IEnumerable<Key>? Model { get; init; }

        /// <summary>
        /// Creates a new RegistryModel object from a given JsonModel
        /// </summary>
        /// <returns>The new RegistryModel object</returns>
        public static RegistryModel FromJsonModel(JsonModel.JsonModel jsonModel)
        {
            return new RegistryModel
            {
                Model = jsonModel
                    .Model!
                    .Groups
                    .SelectMany(Key.FromJsonGroup)
            };
        }
        
        /// <summary>
        /// Writes an installer script to a file from the data this model contains
        /// </summary>
        /// <param name="path">Path where the file should be saved to</param>
        /// <param name="keepOld">Whether the installer should build on old installations, or clear them</param>
        public void SerializeInstaller(string path, bool keepOld)
        {
            IEnumerable<string> data = new List<string>(RegistryHeader);

            if (!keepOld)
            { 
                data = data.Concat(UninstallerData);
            }
            
            data = data.Concat(InstallerData);
            
            File.WriteAllLines(path, data.ToArray());
        }

        /// <summary>
        /// Writes an uninstall script to a file from the data this model contains.
        /// This uninstaller may delete unintended entries if any installs that keep old data are done.
        /// </summary>
        /// <param name="path">Path where the file should be saved to</param>
        public void SerializeUninstaller(string path)
        {
            File.WriteAllLines(path, UninstallerData.ToArray());
        }
    }
}
